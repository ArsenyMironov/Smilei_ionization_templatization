################################################################################
# Machine file for the Adastra machine at CINES
#
# Note:
#
# You'll want to compile smilei with the "gpu_amd" config flag enabled:
# $ make machine="adastra" config="amd_gpu" -j
#
# Each node has 4 MI250X accelerators. An MI250X is made of 2 GCDs which are to 
# be used as if it was an individual GPU.
# You'll want to associate one MPI proc per GCD (2 MPI/MI250X).
#
# To compile you may want these modules:
#
# module purge
# module load craype-accel-amd-gfx90a craype-x86-trento
# module load PrgEnv-cray/8.3.3
# module load cpe/23.02
# module load cray-mpich/8.1.24 cray-hdf5-parallel/1.12.2.1 cray-python/3.9.13.1
# module load amd-mixed/5.2.3
# module list
#
# Optionally, you may want to use a virtual python environment in which to 
# install the packages required by the Smilei validation script:
#
# python -m venv ~/.smilei_python_venv
# source ~/.smilei_python_venv/bin/activate
# python -m pip install --upgrade --retries 0 --timeout 5 pip
# pip3 install --retries 0 --timeout 5 numpy h5py matplotlib
#
#
################################################################################

################################################################################
# Compilers
################################################################################

SMILEICXX := CC
SMILEICXX_DEPS := $(SMILEICXX)
# GPU_COMPILER := hipcc
GPU_COMPILER := $(SMILEICXX)

################################################################################
# Feature flags
################################################################################

ifneq (,$(call parse_config,gpu_amd))
    # Use C++14 as required by rocThrust
	ADASTRA_FEATURE_FLAGS := -std=c++14
else
	ADASTRA_FEATURE_FLAGS := -std=c++11
endif

################################################################################
# Warning flags
################################################################################

# ADASTRA_WARNING_FLAGS := -Wextra -pedantic -fdiagnostics-show-option -fstrict-aliasing -Wcast-align -Wcast-qual -Wctor-dtor-privacy -Wdisabled-optimization -Wdouble-promotion -Wformat=2 -Winit-self -Wmissing-include-dirs -Wold-style-cast -Woverloaded-virtual -Wredundant-decls -Wshadow -Wsign-promo -Wstrict-aliasing -Wsuggest-override -Wswitch-default -Wswitch-enum -Wtautological-compare -Wundef -Wunreachable-code
# ADASTRA_WARNING_FLAGS += -Wno-unused-variable -Wno-unused-parameter -Wno-unknown-pragmas

################################################################################
# Optimization flags
################################################################################

# TODO(Etienne M): Thin LTO and mcmodel lead to an "unclosed quote" linker script error: https://reviews.llvm.org/D26795
# ADASTRA_OPTIMIZATION_LTO_FLAGS   := -flto=thin
# ADASTRA_OPTIMIZATION_OTHER_FLAGS := -mcmodel=large
# -march=native is not required, the PrgEnv will set the appropriate CPU arch flags
ADASTRA_OPTIMIZATION_FLAGS       := -O3 $(ADASTRA_OPTIMIZATION_LTO_FLAGS) $(ADASTRA_OPTIMIZATION_OTHER_FLAGS)
# More FP optimizations at the cost of non strict IEEE compliance
# ADASTRA_OPTIMIZATION_FLAGS       += -ffast-math 

################################################################################
# Debug flags
################################################################################

# To check for leaks, use this feature
# ADASTRA_DEBUG_SANITIZER_FLAGS := -fsanitize=address # -fsanitize=undefined
# -g and -ggdb have no know runtime overhead expect for program size
ADASTRA_DEBUG_FLAGS           := -g -ggdb $(ADASTRA_DEBUG_SANITIZER_FLAGS) -v # --cray-print-opts=all -craype-verbose

################################################################################
# OMP GPU offloading support flags
################################################################################

ifneq (,$(call parse_config,gpu_amd))
    # When using OMP

    # ADASTRA_ACCELERATOR_GPU_TARGET := gfx908
	# ADASTRA_ACCELERATOR_GPU_TARGET := gfx908:xnack-
    # ADASTRA_ACCELERATOR_GPU_TARGET := gfx90a
	# ADASTRA_ACCELERATOR_GPU_TARGET := gfx90a:xnack-

    # When using hip/cuda to build kernels
    # When you ask CCE to drive the hip compilation
    # NOTE: the -x hip flag MUST come before the .cu files !
    ADASTRA_GPU_COMPILER_FLAGS := -x hip
    # ADASTRA_GPU_COMPILER_FLAGS += --offload-arch=$(ADASTRA_ACCELERATOR_GPU_TARGET)

    # Diagnostics
    # ADASTRA_GPU_COMPILER_FLAGS += --save-temps # Cuda/HIP kernel info. To use with the AMD compiler (the Cray compiler don't produce interesting details, only the Clang LLVM IR)
    # ADASTRA_GPU_COMPILER_FLAGS += -Rpass-analysis=kernel-resource-usage
endif

################################################################################
# Includes
################################################################################

# ADASTRA_INCLUDES_MPI := -I$(CRAY_MPICH_DIR)/include
# ADASTRA_INCLUDES_HIP := -I$(ROCM_PATH)/hiprand/include -I$(ROCM_PATH)/rocrand/include

ADASTRA_INCLUDES := $(ADASTRA_INCLUDES_MPI) $(ADASTRA_INCLUDES_HIP) -I/opt/software/rocm/5.7.1/include 

################################################################################
# Libs
################################################################################

# May help resolve some linker issue
# -foffload=-lm

# Small perf increase but causes ABI problems when cray-pat is used
# ADASTRA_LIBRARIES_OMP_STATIC := -static-openmp

# ADASTRA_LIBRARIES_MPI_gfx908 := $(PE_MPICH_GTL_DIR_amd_gfx908) $(PE_MPICH_GTL_LIBS_amd_gfx908)
# ADASTRA_LIBRARIES_MPI_gfx90a := $(PE_MPICH_GTL_DIR_amd_gfx90a) $(PE_MPICH_GTL_LIBS_amd_gfx90a)
# ADASTRA_LIBRARIES_MPI        := -L$(CRAY_MPICH_DIR)/lib -lmpi $(ADASTRA_LIBRARIES_MPI_gfx90a)

# NOTE:
# We have to link manually with the ROCm runtime. Why ? I mean, CPE is smart
# enough to link with or without the libmpi_gtl_hsa.so (used to enable GPU aware
# support for the Cray MPICH). This choice is made depending on wether 
# craype-accel-amd-* is loaded or not. So it could very well choose to link with
# libamdhip64. In addition, libmpi_gtl_hsa.so has libamdhip64 as a dependency so
# the resulting executable will depend on libamdhip64 wether we like it or not.


ifneq (,$(call parse_config,gpu_amd))
    # Use C++14 as required by rocThrust
	ADASTRA_LIBRARIES_HIP := -L$(ROCM_PATH)/lib -lamdhip64
endif

ADASTRA_LIBRARIES := $(ADASTRA_LIBRARIES_OMP_STATIC) $(ADASTRA_LIBRARIES_MPI) $(ADASTRA_LIBRARIES_HIP)

################################################################################
#
################################################################################

# Inherit of all the typical *.cpp compilation options
# GPU_COMPILER_FLAGS := $(CXXFLAGS) # This command is soo weird, it doesn't work as expected
GPU_COMPILER_FLAGS += $(ADASTRA_FEATURE_FLAGS)
GPU_COMPILER_FLAGS += $(ADASTRA_WARNING_FLAGS)
GPU_COMPILER_FLAGS += $(ADASTRA_OPTIMIZATION_FLAGS)
GPU_COMPILER_FLAGS += $(ADASTRA_DEBUG_FLAGS)
GPU_COMPILER_FLAGS += $(ADASTRA_OMP_FLAGS)
GPU_COMPILER_FLAGS += $(ADASTRA_ACCELERATOR_GPU_OMP_DEFINE_FLAGS)
# GPU_COMPILER_FLAGS += $(ADASTRA_ACCELERATOR_GPU_OMP_FLAGS) # Disabled due to unsupported option '-fopenmp-targets=' for language mode 'HIP'
GPU_COMPILER_FLAGS += $(ADASTRA_GPU_COMPILER_FLAGS)
GPU_COMPILER_FLAGS += $(ADASTRA_INCLUDES)

CXXFLAGS += $(ADASTRA_FEATURE_FLAGS)
CXXFLAGS += $(ADASTRA_WARNING_FLAGS)
CXXFLAGS += $(ADASTRA_OPTIMIZATION_FLAGS)
CXXFLAGS += $(ADASTRA_DEBUG_FLAGS)
CXXFLAGS += $(ADASTRA_OMP_FLAGS)
CXXFLAGS += $(ADASTRA_ACCELERATOR_GPU_OMP_DEFINE_FLAGS)
CXXFLAGS += $(ADASTRA_ACCELERATOR_GPU_OMP_FLAGS) # if gpu_amd is set, adds the appropriate flags, else nothing is added
CXXFLAGS += $(ADASTRA_INCLUDES)

LDFLAGS += $(ADASTRA_DEBUG_FLAGS) $(ADASTRA_OMP_FLAGS)
LDFLAGS += $(ADASTRA_LIBRARIES)
# We need to link with the appropriate "First-Party Tool" (as OpenMP calls them)
LDFLAGS += $(ADASTRA_ACCELERATOR_GPU_OMP_FLAGS)
# Without Ofast/O3 at link time, the kernel'll not be optimized ~~. 
# Some kind of LTO is used, or maybe the kernel optimization is only done at link time.
# -v to dump omp kernel info (register alloc/spill etc.)
LDFLAGS += $(ADASTRA_OPTIMIZATION_FLAGS)
# LDFLAGS += --save-temps # OpenMP device kernel info. To use with the Cray compiler
